x <- read_fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
fwf_widths(c(12, 7,4, 9,4, 9,4, 9,4)))
htmlCode
x <- read_fwf(https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for)
x <- read_fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
x <- read_fwf(con)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
x <- read_fwf(con)
x <- read_fwf(con, skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
x <- read_fwf( url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ", skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
## functions
)
x <- read_fwf( url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "), skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
close()
close(con)
x <- read_fwf( url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "), skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
library(readr)
x <- read_fwf( url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for "), skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
x <- read_fwf(con, skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
con
x
htmlCode <- readLines(con)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for ")
htmlCode <- readLines(con)
head(htmlCode)
write.table(htmlCode, file = "texty.txt")
x <- read_fwf("texty.txt"), skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
x <- read_fwf("texty.txt", skip=4, fwf_widths(c(12, 7,4,9,4,9,4,9,4)))
head(x)
sum(x$X4)
summary(x$X4)
sum(as.numeric(x$X4))
x <- read_fwf("texty.txt", skip=4, fwf_widths(c(13, 7,4,9,4,9,4,9,4)))
sum(as.numeric(x$X4))
head(x)
summary(x)
summary(as.numeric(x$X4))
x$X4
x <- read_fwf("texty.txt", skip=4, widths = c(12, 7,4,9,4,9,4,9,4))
x <- read.fwf("texty.txt", skip=4, widths = c(12, 7,4,9,4,9,4,9,4))
head(x)
head(x, 50)
x <- read.fwf("texty.txt", skip=4, widths = c(16, 7,4,9,4,9,4,9,4))
head(x, 50)
x <- read.fwf("texty.txt", skip=4, widths = c(16, 9,4,9,4,9,4,9,4))
head(x, 50)
colSums(as.numeric(x$V4))
sum(as.numeric(x$V4))
length(x)
length(x$V1)
1255* 25
x <- read.fwf("texty.txt", skip=12, widths = c(16, 9,4,9,4,9,4,9,4))
sum(as.numeric(x$V4))
head(x, 20)
tail(x, 20)
install.packages('maps')
library(maps)
map('state.carto', fill = TRUE, col = palette())
data(stateMapEnv)
data(state.vbm.center)
map('usa')
install.packages(gpclib)
install.packages('gpclib')
install.packages('maptools')
library(RColorBrewer)
library(classInt)
install.packages('classInt')
library(gpclib)
library(maptools)
gpclibPermit()
library(classInt)
a <-download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv )
a <-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv" )
a <-download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", a.csv )
?download.file
getwd()
a <- read.csv("getdata-data-ss06hid.csv")
head(a)
library(dplyr)
vec <- ifelse(a$ACR ==4, ifelse(a$AGS == 6, TRUE, FALSE), FALSE)
head(vec)
b <- a[vec]
b <-tbl_df(a)
c <- filter(b, ACR == 3)
d <- filter(c, AGS == 6)
head(d)
vec <- ifelse(a$ACR ==4, ifelse(a$AGS == 6, TRUE, FALSE), FALSE)
a[which(vec)]
which(vec)
head(vec)
head(vec, 19)
head(vec, 300)
which(vec)
vec <- ifelse(a$ACR ==3, ifelse(a$AGS == 6, TRUE, FALSE), FALSE)
which(vec)
library(jpeg)
install.packages("jpeg")
library(jpeg)
readJPEG("test.jpg")
readJPEG("test.jpg", native=TRUE)
a <-readJPEG("test.jpg", native=TRUE)
quantile(a, c(.3, .8))
a <- read.csv('edstats.csv')
b <- read.csv('GDP.csv')
?merge
?join
head(b)
head(b$X.1)
head(b$X.1, 30)
head(b$X, 30)
head(a$X, 30)
head(a, 30)
c <- merge(a, b, by.x="X", by.y = "CountryCode")
c <- merge(a, b, by.x=X, by.y = "CountryCode")
c <- merge(a, b, by.x=a$X, by.y = "CountryCode")
c <- merge(a, b, by.y = "CountryCode")
c <- merge(a, b, by.y = b$X)
?merge
c <- merge(a,b)
head(c, 30)
head(c, 3)
head(a$Short.Name)
head(a$CountryCode)
head(b$X)
merge(a, b, by.a = "CountryCode", by.b = "X")
c <- merge(a, b, by.a = "CountryCode", by.b = "X")
head(c,2)
d <- sort(c$Gross.domestic.product.2012)
head(d$Gross.domestic.product.2012)
head(d, 15)
head(c,5)
length(d)
length(a)
length(b)
length(a$CountryCode)
length(b$X)
c <- merge(a, b, by.x = "CountryCode", by.y = "X")
d <- sort(c$Gross.domestic.product.2012)
head(d, 15)
head(d$GDP)
combined <- merge(a,b, by.x = "CountryCode", by.y = "X")
head(combined)
combined$GDP <- as.numeric(as.character(combined$Gross.domestic.product.2012))
combined$Short.Name <- as.character(combined$Short.Name)
head(combined, 13)
head(combined[order(combined$GDP, decreasing = TRUE)])
head(combined[order(combined$GDP, decreasing = TRUE),])
head(combined[order(combined$GDP, decreasing = TRUE),], 13)
?cut
f <- tapply(combined$GDP, combined$Income.Group, na.rm = TRUE, man)
f <- tapply(combined$GDP, combined$Income.Group, na.rm = TRUE, mean)
f
g <- cut(combined, breaks=5)
g <- cut(combined$GDP, breaks=5)
?table
table(g$GDP, g$Income.Group)
g <- data.frame(combined$Short.Name, combined$GDP, combined$Income.Group)
head(g)
g$quant <- cut(g$combined.GDP, breaks=5)
table(g$quant, g$combined.GDP)
table(g$quant, g$combined.Income.Group)
library(maps)
news(package="maps")
m = map("state", fill = TRUE, plot = FALSE)
area.map(m)
map()
map('usa')
map('town', 'vermont')
map('county', 'vermont')
map.cities(us.cities. country="VT")
data(us.cities)
map.cities(us.cities, country="VT")
map.cities(us.cities, country="VT")
map('county', 'illinois')
map.cities(us.cities, country="IL")
setwd("~/Desktop/puzzles-starting-2015/puzzle-16-vt-crashes")
?map
library(maptools)
setwd("~/Desktop/puzzles-starting-2015/puzzle-16-vt-crashes/BoundaryOther_BNDHASH")
ls
dir
ls()
dir()
vt=readShapeSpatial('Boundary_BNDHASH_region_towns.shp')
plot(vt)
summary(vt)
attributes(vt@data)
vt$TOWNNAME
pop  <- read.csv('../2012pop.csv')
pop
?merge
merge_test <- merge(vt, pop, by.x = TOWNNAME, by.y = NAME)
merge_test <- merge(vt, pop, by.x = vt$TOWNNAME, by.y = pop$NAME)
summary(vt)
attributes(vt@data)
merge_test <- merge(vt, pop, by.x = TOWNNAME, by.y = pop$NAME)
merge_test <- merge(vt, pop, by.x = vt$TOWNNAME, by.y = pop$NAME)
vt$names
vt$TOWNNAMES
vt$TOWNNAME
merge_test <- merge(vt, pop, by.x = "TOWNNAME", by.y = "NAME")
merge_test
summary(merge_test)
merge_test$X2012.population
length(merge_test$X2012.population)
plot(vt, col=gray(vt@data$X2012.population))
plot(vt, col=gray(vt@data$X2012.population/45000))
vt$data
vt@data
merge_test <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME")
plot(vt, col=gray(vt@data$X2012.population/45000))
merge_test <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME")
summary(vt)
head(vt)
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME")
plot(vt, col=gray(vt@data$X2012.population/45000))
plot(vt, col=gray(vt@data$X2012.population))
plot(vt, col=gray(vt@data$X2012.population/42000))
plot(vt, col=gray(vt@data$X2012.population/44000))
plot(vt, col=(vt@data$X2012.population/44000))
ggplot(vt, aes(color=vt@data$X2012.population))
library(ggplot2)
ggplot(vt, aes(color=vt@data$X2012.population))
ggplot(vt, aes(color=vt@data$X2012.population)) + geom_polygon()
ggplot()+geom_polygon(data=vt, aes())
ggplot(vt)+geom_polygon(data=vt, aes())
head(vt@data)
head(vt@data, 50)
head(vt@data, 50)
plot(vt, col=gray(vt@data$X2012.population/42282))
?plot
plot(vt, col=red(vt@data$X2012.population/42282))
plot(vt, col=gray(vt@data$X2012.population/42282))
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
head(vt@data, 200)
attributes(vt@data)
attributes(vt)
head(vt@data, 200)
vt$plotorder
vt$plotOrder
vt@data$plotOrder
vt@plotOrder
?range
c(1:39)
length(vt@plotOrder)
vt@plotOrder  <- c(1:255)
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
vt@plotOrder
attributes(vt)
attributes(vt@data)
vt <- readShapeSpatial('Boundary_BNDHASH_region_towns.shp')
#plot(vt)
## read in VT population info
pop  <- read.csv('../2012pop.csv')
summary(vt@data)
plot(vt, col=rgb(256*vt@data$TOWNS_ID/255,0,0, maxColorValue = 256))
plot(vt, col=rgb(256*vt@data$TOWNS_ID/256,0,0, maxColorValue = 256))
plot(vt, col=rgb(vt@data$TOWNS_ID/256,0,0, maxColorValue = 256))
plot(vt, col=rgb(vt@data$TOWNS_ID,0,0, maxColorValue = 256))
plot(vt, col=rgb(vt@data$TOWNS_ID*256/300,0,0, maxColorValue = 256))
head(vt@data, 255)
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME")
head(vt@data, 255)
?sort
library(plyr)
library(dplyr)
?arrange
arrange(vt@data, TOWNS_ID)
vt@data  <- arrange(vt@data, TOWNS_ID)
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
vt@data  <- arrange(vt@data, TOWNS_)
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
vt <- readShapeSpatial('Boundary_BNDHASH_region_towns.shp')
head(vt@data, 250)
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME")
vt@data  <- arrange(vt@data, TOWNS_)
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
head(vt@data, 250)
?merge
vt@data  <- arrange(vt@data, TOWNNAME)
head(vt@data, 250)
vt <- readShapeSpatial('Boundary_BNDHASH_region_towns.shp')
#plot(vt)
## read in VT population info
pop  <- read.csv('../2012pop.csv')
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME", all.x=TRUE)
vt@data  <- arrange(vt@data, TOWNNAME)
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME", all.x=TRUE)
vt@data  <- arrange(vt@data, TOWN_)
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME", all.x=TRUE)
vt@data  <- arrange(vt@data, TOWNS_)
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
plot(vt, col=rgb(vt@data$X2012.population/42282,0,0, maxColorValue = 256))
head(vt@data, 250)
head(vt@data, 250)
head(vt@data, 260)
pop  <- read.csv('../2012pop.csv')
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME", all.x=TRUE)
vt@data  <- arrange(vt@data, TOWNS_)
plot(vt, col=rgb(vt@data$X2012.population/42282,0,0, maxColorValue = 256))
vt <- readShapeSpatial('Boundary_BNDHASH_region_towns.shp')
#plot(vt)
## read in VT population info
pop  <- read.csv('../2012pop.csv')
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME", all.x=TRUE)
vt@data  <- arrange(vt@data, TOWNS_)
plot(vt, col=rgb(vt@data$X2012.population/42282,0,0, maxColorValue = 256))
head(vt@data, 260)
vt <- readShapeSpatial('Boundary_BNDHASH_region_towns.shp')
#plot(vt)
## read in VT population info
pop  <- read.csv('../2012pop.csv')
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME", all.x=TRUE)
vt@data  <- arrange(vt@data, TOWNS_)
plot(vt, col=rgb(vt@data$X2012.population/42282,0,0, maxColorValue = 256))
plot(vt, col=rgb(256*vt@data$X2012.population/42282,0,0, maxColorValue = 256))
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
summary(crashes)
crash_table <- table(crashes)
crash_table <- table(crashes$Town)
crash_table
plot(vt, col=rgb(256-(256*vt@data$X2012.population/42282),256,256, maxColorValue = 256))
head(crash_table)
class(crash_table)
crash_df  <- data.frame(crash_table)
crash_df
head(vt@data)
vt@data <- merge(vt@data, crash_df, by.x = "TOWNNAMEMC", by.y = "Var1", all.x=TRUE, all.y=TRUE)
head(vt@data)
head(vt@data, 260)
?ifelse
crash_df <- mutate(crash_df, town = ifelse(Var1 == "Buel's Gore", "Buels Gore", Var1))
vt@data <- merge(vt@data, crash_df, by.x = "TOWNNAMEMC", by.y = "Var1", all.x=TRUE, all.y=TRUE)
head(vt@data, 260)
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, town = ifelse(Var1 == "Buel's Gore", "Buels Gore", Var1))
## merge crash data with
vt@data <- merge(vt@data, crash_df, by.x = "TOWNNAMEMC", by.y = "Var1", all.x=TRUE, all.y=TRUE)
head(vt@data, 260)
head(vt@data, 260)
vt <- readShapeSpatial('Boundary_BNDHASH_region_towns.shp')
#plot(vt)
## read in VT population info
pop  <- read.csv('../2012pop.csv')
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME", all.x=TRUE)
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, town = ifelse(Var1 == "Buel's Gore", "Buels Gore", Var1))
head(vt@data, 260)
vt@data <- merge(vt@data, crash_df, by.x = "TOWNNAMEMC", by.y = "Var1", all.x=TRUE, all.y=TRUE)
head(vt@data, 260)
crash_df
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Buel's Gore", "Buels Gore", Var1))
crash_df
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, Var1 = ifelse(t == "Buel's Gore", "Buels Gore", Var1))
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, Var1 = ifelse(t == "Buel's Gore", "Buels Gore", crash_df$Var1))
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, t = ifelse(Var1 == "Buel's Gore", "Buels Gore", crash_df$Var1))
crash_df
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Buel's Gore", "Buels Gore"))
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Buel's Gore", "Buels Gore", as.character(Var1)))
crash_df
head(vt@data, 260)
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Buel's Gore", "Buels Gore", as.character(Var1)))
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Isle Lamotte", "Isle La Motte", as.character(Var1)))
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Mt. Holly", "Mount Holly", as.character(Var1)))
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Mt. Tabor", "Mount Tabor", as.character(Var1)))
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Rutland Town", "Rutland", as.character(Var1)))
vt@data <- merge(vt@data, crash_df, by.x = "TOWNNAMEMC", by.y = "Var1", all.x=TRUE, all.y=TRUE)
vt@data  <- arrange(vt@data, TOWNS_)
head(vt@data)
head(vt@data, 260)
vt <- readShapeSpatial('Boundary_BNDHASH_region_towns.shp')
#plot(vt)
## read in VT population info
pop  <- read.csv('../2012pop.csv')
vt@data <- merge(vt@data, pop, by.x = "TOWNNAME", by.y = "NAME", all.x=TRUE)
#vt@data  <- arrange(vt@data, TOWNS_)
#plot(vt, col=rgb(256-(256*vt@data$X2012.population/42282),256,256, maxColorValue = 256))
## import crash data
crashes <- read.csv('../Vermont_Crash_Data_2012.csv')
crash_table <- table(crashes$Town)
crash_df  <- data.frame(crash_table)
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Buel's Gore", "Buels Gore", as.character(Var1)))
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Isle Lamotte", "Isle La Motte", as.character(Var1)))
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Mt. Holly", "Mount Holly", as.character(Var1)))
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Mt. Tabor", "Mount Tabor", as.character(Var1)))
crash_df <- mutate(crash_df, Var1 = ifelse(Var1 == "Rutland Town", "Rutland", as.character(Var1)))
## merge crash data with
vt@data <- merge(vt@data, crash_df, by.x = "TOWNNAMEMC", by.y = "Var1", all.x=TRUE, all.y=TRUE)
vt@data  <- arrange(vt@data, TOWNS_)
head(vt@data, 50)
head(vt@data, 260)
class(vt@data)
?nrow
vt@data[nrow()]
vt@data[nrow(257)]
vt@data[nrow(256)]
vt@data[nrow(256:257)]
vt@data[nrow(256:257),]
vt@data[nrow(256),]
vt@data[nrow(1),]
vt@data[nrow(1:10),]
vt@data[nrow(vt@data),]
vt@data[256:257,]
vt@data <- vt@data[1:255,]
head(vt@data, 260)
is.na?
)
?is.na
vt@data$Freq[is.na(vt@data$Freq)] <- 0
head(vt@data, 260)
plot(vt, col=rgb(256-(vt@data$Fre1/vt@data$X2012.population) 196,196, maxColorValue = 1))
plot(vt, col=rgb(256-(vt@data$Freq/vt@data$X2012.population) 196,196, maxColorValue = 1))
plot(vt, col=rgb(256-(vt@data$Freq/vt@data$X2012.population) 196,196, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$Freq/vt@data$X2012.population) 196,196, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$Freq/vt@data$X2012.population), 196,196, maxColorValue = 256))
vt@data <- mutate(vt@data, acc_per_cap = Freq/X2012.population)
head(vt@data, 260)
?is.nan
vt@data$Freq[is.nan(vt@data$acc_per_cap)] <- 0
plot(vt, col=rgb(256-(256*vt@data$X2012.acc_per_cap),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(25600*vt@data$X2012.acc_per_cap),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(25600*vt@data$acc_per_cap),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(2560*vt@data$acc_per_cap),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap),256,256, maxColorValue = 256))
vt@data$Freq[is.nan(vt@data$acc_per_cap)] <- 0
head(vt@data, 260)
vt@data$acc_per_cap[is.nan(vt@data$acc_per_cap)] <- 0
head(vt@data, 260)
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap/.375),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap/.375),196,196, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap/.375),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap/.175),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap/.375),256,256, maxColorValue = 256))
vt@data <- mutate(vt@data, log_acc <- abs(log10(acc_per_cap)))
head(vt@data, 260)
vt@data <- mutate(vt@data, log_acc = abs(log10(acc_per_cap)))
?is.infinite
vt@data <- mutate(vt@data, log_acc = log10(acc_per_cap))
head(vt@data, 260)
max(vt@data$log_acc)
min(vt@data$log_acc)
max(abs(vt@data$log_acc))
vt@data$log_acc[is.infinite(vt@data$log_acc)] <- -4
head(vt@data, 260)
vt@data <- mutate(vt@data, log_acc_mod = (log_acc + 4)/4)
head(vt@data, 260)
vt@data <- mutate(vt@data, log_acc_mod = (log_acc + 4)/3.43)
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap/.375),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$log_acc_mod/.375),256,256, maxColorValue = 256))
vt@data <- mutate(vt@data, log_acc_mod = (log_acc + 4)/3.43)
plot(vt, col=rgb(256-(256*vt@data$acc_per_cap/.375),256,256, maxColorValue = 256))
plot(vt, col=rgb(256-(256*vt@data$log_acc_cap),256,256, maxColorValue = 256))
head(vt@data, 260)
vt@data <- mutate(vt@data, log_acc_mod = (log_acc + 4)/3.6)
plot(vt, col=rgb(256-(256*vt@data$log_acc_cap),256,256, maxColorValue = 256))
head(vt@data, 260)
plot(vt, col=rgb(256-(256*vt@data$log_acc_cap),256,256, maxColorValue = 256))
plot(vt, col=rgb((256*vt@data$log_acc_cap),256,256, maxColorValue = 256))
plot(vt, col=rgb((256*vt@data$log_acc_cap),0,256, maxColorValue = 256))
plot(vt, col=rgb((256*vt@data$log_acc_mod),256,256, maxColorValue = 256))
plot(vt, col=rgb(256, 256 - (256*vt@data$log_acc_mod), 256 - (256*vt@data$log_acc_mod), maxColorValue = 256))
plot(vt, col=rgb(196 + (60*vt@data$log_acc_mod), 196 - (196*vt@data$log_acc_mod), 196 - (196*vt@data$log_acc_mod), maxColorValue = 256))
png('question_log_map.png', height=1200, width=700)
plot(vt, col=rgb(196 + (60*vt@data$log_acc_mod), 196 - (196*vt@data$log_acc_mod), 196 - (196*vt@data$log_acc_mod), maxColorValue = 256))
dev.off()
vt@data <- mutate(vt@data, bacc_per_cap = ifelse(X2012.population > 1000), acc_per_cap, 0))
vt@data <- mutate(vt@data, bacc_per_cap = ifelse(X2012.population > 1000), acc_per_cap, 0)
vt@data <- mutate(vt@data, bacc_per_cap = ifelse(X2012.population > 1000, acc_per_cap, 0))
vt@data
plot(vt, col=rgb(196 + (60*vt@data$acc_per_cap/.375), 196 - (196*vt@data$acc_per_cap/.375), 196 - (196*vt@data$acc_per_cap/.375), maxColorValue = 256))
png('question_lin_map.png', height=1200, width=700)
plot(vt, col=rgb(196 + (60*vt@data$acc_per_cap/.375), 196 - (196*vt@data$acc_per_cap/.375), 196 - (196*vt@data$acc_per_cap/.375), maxColorValue = 256))
dev.off()
max(vt@data$bacc_per_cap)
plot(vt, col=rgb(196 - (196*vt@data$bacc_per_cap/.0467), 196 - (196*vt@data$bacc_per_cap/.0467), 196 + (60*vt@data$bacc_per_cap/.0467), maxColorValue = 256))
plot(vt, col=rgb(196 - (196*vt@data$bacc_per_cap/.0468), 196 - (196*vt@data$bacc_per_cap/.0468), 196 + (60*vt@data$bacc_per_cap/.0468), maxColorValue = 256))
vt@data[max(vt@data$bacc_per_cap)==vt@data$bacc_per_cap]
vt@data[max(vt@data$bacc_per_cap)==vt@data$bacc_per_cap,]
png('answer_lin_map.png', height=1200, width=700)
plot(vt, col=rgb(196 - (196*vt@data$bacc_per_cap/.0468), 196 - (196*vt@data$bacc_per_cap/.0468), 196 + (60*vt@data$bacc_per_cap/.0468), maxColorValue = 256))
dev.off()
?order
?arrange
View(arrange(vt@data, bacc_per_cap))
